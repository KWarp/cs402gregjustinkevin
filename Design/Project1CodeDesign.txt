/*
Greg: Do OrderTaker
	Seperate the actual order taker
	And the takeOrder function, so that the Manager can do it too
*/	
	
//=======================================================================
	


//=============================================================	
// DATA
//=============================================================	

// conveniences
int TRUE = 1;
int FALSE = 0;

// Maximum number of Agents in the simulation
int max_OrderTakers;
int max_Customers;
int max_Cooks;
int max_FoodChoices;

// Line To Enter Restaurant
int[] lineToEnterRest;
int lineToEnterRestLength;
int lock_MrCr_LineToEnterRest;
int[] CV_MrCr_LineToEnterRestFromCustomerID;

// Line To Order Food
int[] lineToOrderFood;
int lineToOrderFoodLength;
int lock_OrCr_LineToOrderFood;
int[] CV_MrCr_LineToOrderFoodFromCustomerID;

// Used by the Customer routine
int[] ID_Get_OrderTakerIDFromCustomerID;
int[] Get_CustomerOrderFoodChoiceFromOrderTakerID;
int[] Get_CustomerMoneyPaidFromOrderTakerID;
int[] lock_OrderTakerBusy;
int[] CV_OrderTakerBusy;
int[] token_OrCr_OrderNumberFromCustomerID;
int[] lock_CustomerSitting; 
int[] CV_CustomerSitting;
int[] CV_CustomerWaitingForFood;
int[] bool_ListOrdersReadyFromToken; // TO DO: initialize to zero

// MISC
int tablesAvailable;
int lock_OrderReady;
int CV_OrderReady;

//=============================================================	
// METHODS
//=============================================================	

//
// Top Level Customer Routine
//
void Customer(int ID)
{
	int eatIn = randomNumber(1);
	
	if(eatIn)
	{
		waitInLineToEnterRest(ID);
	}
	
	waitInLineToOrderFood(ID);
	//at this point we are locked with the order taker
	
	
	// randomly pick an order and tell it to order taker
	Get_CustomerOrderFoodChoiceFromOrderTakerID[ID_Get_OrderTakerIDFromCustomerID[ID]] = randomNumber(max_FoodChoices);
	// Ordered, signal Order Taker - this represents talking to ordertaker
	signal(lock_OrderTakerBusy[ID_Get_OrderTakerIDFromCustomerID[ID]],
					CV_OrderTakerBusy[ID_Get_OrderTakerIDFromCustomerID[ID]]);
	//wait for order taker to respond
	wait(lock_OrderTakerBusy[ID_Get_OrderTakerIDFromCustomerID[ID]], 			
					CV_OrderTakerBusy[ID_Get_OrderTakerIDFromCustomerID[ID]]);
	// Order Taker got my order, and money
	// Order Taker gives me an order number in exchange
	int token = token_OrCr_OrderNumberFromCustomerID[ID];
	
	//this is the money the customer gives to the orderTaker
	Get_CustomerMoneyPaidFromOrderTakerID = Get_CostFromFoodChoice[Get_CustomerOrderFoodChoiceFromOrderTakerID[ID_Get_OrderTakerIDFromCustomerID[ID]]];
	
	signal(lock_OrderTakerBusy[ID_Get_OrderTakerIDFromCustomerID[ID]], 
					CV_OrderTakerBusy[ID_Get_OrderTakerIDFromCustomerID[ID]]);

	if(eatIn)
	{
		// we want the customer to be ready to receive the order
		// before we release the OrderTaker to process the order
		acquire(lock_CustomerSitting[ID]);
		release(lock_OrderTakerBusy[ID_Get_OrderTakerIDFromCustomerID[ID]]);
		
		//wait for order to be ready.  waiter will deliver it just to me, so I have my own condition variable.
		wait(lock_CustomerSitting[ID], CV_CustomerSitting[ID]);
		// I received my order
		release(lock_CustomerSitting[ID]);
		sleep(1000); // while eating for 1 second
		
		//make the table available again.
		acquire(lock_MrCr_LineToEnterRest);
		tablesAvailable += 1;
		release(lock_MrCr_LineToEnterRest);
		
		//leave store;
		return;
	}
	else
	{
		//prepare to recieve food before I let the order take go make it.
		acquire(lock_OrderReady);
		//let ordertaker go make food.
		release(lock_OrderTakerBusy[ID_Get_OrderTakerIDFromCustomerID[ID]]);
		
		// check if my order is ready
		while(bool_ListOrdersReadyFromToken[token])
		{
			// wait for an OrderReady broadcast
			wait(lock_OrderReady, CV_OrderReady);
		}
		bool_ListOrdersReadyFromToken[token] = FALSE;
		release(lock_OrderReady);		
		
		//leave store;
		return;
	}
}


//
// Customers getting in line for the restaurant
//
void waitInLineToEnterRest(int ID)
{
	acquire(lock_MrCr_LineToEnterRest);
	lineToEnterRest[lineToEnterRestLength] = ID;
	lineToEnterRestLength++;
	// wait in line, and pass my ID as CV
	wait(lock_MrCr_LineToEnterRest, CV_MrCr_LineToEnterRestFromCustomerID[ID]);
	
	if (lineToEnterRestLength > 0)
	{
		lineToEnterRestLength--;
	}
	else
	{
		// print error
	}	
	release(lock_MrCr_LineToEnterRest);
}

//
// Customers getting in line to take an Order
//
void waitInLineToOrderFood(int ID)
{
	acquire(lock_OrCr_LineToOrderFood);
	lineToOrderFood[lineToOrderFoodLength] = ID;
	lineToOrderFoodLength++;
	wait(lock_OrCr_LineToOrderFood, CV_MrCr_LineToOrderFoodFromCustomerID[ID]);
	
	if (lineToOrderFoodLength > 0)
	{
		lineToOrderFoodLength--;
	}
	else
	{
		// print error
	}	
	// make sure OrderTaker is ready to serve me
	acquire(lock_OrderTakerBusy[ID_Get_OrderTakerIDFromCustomerID[ID]]);
	release(lock_OrCr_LineToOrderFood);
}

//
// Manager Opening Spaces in line
//
void managerCheckLineToEnterRest()
{
	acquire(lock_MrCr_LineToEnterRest);
	if (lineToEnterRestLength > 0)
	{
		if (tablesAvailable > 0)
		{
			tablesAvailable -= 1;
			// signal to the customer to enter the restaurant
			signal(lock_MrCr_LineToEnterRest, 
				CV_MrCr_LineToEnterRestFromCustomerID[lineToEnterRest[lineToEnterRestLength-1]]);
		}
	}
	release(lock_MrCr_LineToEnterRest);
}



//=======================================================================
// UTILITY METHODS
//=======================================================================

int randomNumber(int count)
{
	return 4;
}

void printString(char[] s, int length)
{
	// ???
}

void printNumber(int i)
{
	// ???
}