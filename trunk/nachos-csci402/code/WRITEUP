Title:  Writeup for Project 4, Fall 2010
Date:  11/30/2010
Group Number 28 :

Name            	                  Email                            Student ID
Greg Lieberman         greglieb@usc.edu            6424286089
Justin Lewis               jdl@usc.edu                     5771862417
Kevin Greene            kgreene@usc.edu             7671772747

=================
Running the code:
=================

Please compile from the network directory.
-rs values will work, but are not required

=== Part 1 ===
1) A "large" Carl's Jr implementation that runs on a single instance of Nachos. This should run to completion (before ITS termination for running too long).
  a) Open 2 Windows of SCF - SSH aludra
  b) Each window should have 1 of the following
    nachos -s 36 -m 0
    nachos -config 1 -x ../test/networksim -m 1

This will make 20 Customers, 5 OrderTakers, 5 Waiters, 1 Manager, and 5 Cooks.
So the server will expect 36 Network Threads

2) A reduced Carl's Jr that runs on at least 2 different Nachos instances. This is also to run to completion. This should be as big as you can get, but still finish.
  a) Open 3 Windows of SCF - SSH aludra
  b) Each window should have 1 of the following
    nachos -s 15 -m 0
    nachos -config 2 -x ../test/networksim -m 1
    nachos -config 3 -x ../test/networksim -m 2

This will make 5 Customers, 2 OrderTakers, 2 Waiters, 1 Manager, and 5 Cooks.
So the server will expect 15 Network Threads

== To run a Project 4 Registration Server in Nachos ==
  nachos -s [number of expected net threads]  -m 0
Example: 
  nachos -s 4 -m 0

== To run a Project 4 User Program ==
 nachos -config [number read by user prog] -x ../test/[user program name] -m [ID greater than 0]
Example: 
  this will Exec four User/Network thread pairs for teststartuserprogram
  nachos -config 4 -x ../test/teststartuserprogram -m 1


=== EXTRA CREDIT===
Here we will demonstrate the server thread on one Nachos instance, and multiple network threads on another instance 

1) A test with 4 to 5 kernel threads, one per Nachos instance, that run with a -l argument of 0.7, or so. This is to finish normally.
  a) Open 4 Windows of SCF - SSH aludra
  b) The first window should have the following:
    nachos -s 3 -m 0 -l 0.7
  c) The remaining three windows should each have the following:
    nachos -config 1 -x ../test/teststartuserprogram -m 1 -l 0.7
    nachos -config 1 -x ../test/teststartuserprogram -m 2 -l 0.7
    nachos -config 1 -x ../test/teststartuserprogram -m 3 -l 0.7

2) A test with 2 kernel threads in two Nachos instances, that will run to completion, with a -l down to 0.1
  a) Open 2 Windows of SCF - SSH aludra
  b) The first window should have the following:
    nachos -s 1 -m 0 -l 0.1
  b) The second window should have the following:
    nachos -config 1 -x ../test/teststartuserprogram -m 1 -l 0.1


=================
I. Requirements:
=================

1) Implement a distributed version of our Carls Jr. Simulation in Nachos

Modify the syscalls from project 3, part 3, so that they send a message from the user thread to its paired network thread.

You need 2 threads for each user program: as user thread, and a networking thread. The user thread runs the user program, and the networking thread sends and receives messages from other network threads.

The Carls Jr simulation must be able to complete without error.
The user program can exit, but the networking thread cannot.

Total ordering must be implemented. This insures that every user program makes the same decisions as all other user programs.

When a user program thread needs to Lock, CV, or MV, they must message the networking thread. Since the networking thread already listens to messages, just have the user program syscall send a message.


2) Extra Credit: Handle Lost Packets
The ‘-l’ command line parameter will affect packet loss
1.0 = 100%
Example: -l 0.5
The simulation should work with the -l value as low as 0.1


=================
II. Assumptions:
=================
	
	- Maximum physical pages is 1048576
	- Clients and servers will communicate over a single, hardcoded port number.
	- User threads will communicate only with their appropriate network thread pair
	- Network threads will communicate with other network threads, and their one paired user thread.
	- MESSAGE FORMATTING
	- we expect messages to the formatted the following way:
	--- timestamp:RequestType_data
	--- every packet will have one ‘:’ and one ‘_’
- We assume we will never get partial packets
	- We completely trust packet data
- Assumed illegal operations:
	--- Destroying a non-existing lock, condition, or monitor variable
	--- Acquiring a non-existing lock
	--- Releasing a non-existing or unowned lock
	--- Calling signal, wait or broadcast using an unowned lock or non-existant condition variable
           --- Setting/Getting non-existant monitor variable
	- Max locks per Network Thread is 100
	- Max MVs per Network Thread is 500
	- Max CVs per Network Thread is 100
	- Max Nachos instances in the distributed system is 10
	- Max combined Network and User threads per Nachos instance is 100
	
	

=================
III. Design:
=================

Requirements of a fully distributed system:
1) Reliable communication
2) Globally unique identifier for each group member
3) Total ordering of events
-- not time ordering on a clock cycle
-- an event is a Send/Receive
-- all group members agree on the order of sends

Messages from a single group member are received in timestamp order.
No 2 messages have the same timestamp.
Each group member contains a “last timestamp received table”

Elements needed in a msg:
- timestamp
- memberID

Exec pairs of threads. For each user thread that gets Exec’ed, also make a networking thread.

Each thread must have its own unique mailbox#. Store it in the thread class.
How the user prog threads know their networking threads:
networking thread number  = user program thread number + 1

==Networking Thread==
Every networking thread will have a complete state of the simulation
Declare the tables that keep track of messages inside the networking thread kernel function.
Do not declare in system.h, it cannot be global.

Timestamps:
use the time_t structure
#include <ctime>
The networking thread will make the timestamp

When a network thread receives a msg from its user prog:
- get the timestamp
- add the timestamp to received msg
- send msg to all members, including self 
- do another receive

When a network thread receives a msg from any network thread (including self):
- total ordering of events alg
- while(msg can be processed) process a msg

When the network replies to a user prog thread request:
- Immediately for: CreateLock, DestroyLock, Signal, Wait, Broadcast, MV syscalls
- Exceptions: Acquire, Wait. 
-- Reply when your user prog thread is removed from the Wait Queue.
- When processing a msg, exactly 1 msg should be sent to the user prog thread

How threads know where each other are:
Each net thread knows the machine ID and mailbox number of all other threads
Group Registration Server
each networking thread sends a registration msg to this server. 
The server maintains a list of all net threads.
When all registered, the server sends a msg to all threads with ids and mailbox number for all net threads. Then the server shuts down.
How does the server know how many registered? Command line args.
How does a net thread know how many msgs will come from the server? Embed in the server’s ACK reply.

When does the user prog thread start?
After the network thread registration process goes through.

Have a StartSimularion syscall

Timestamp updating:
When a net thread receives a request, send out a timestamp msg to all other net threads



=================
IV. Implementation:
=================

Greg and Kevin worked on implementing Network Threads and Server Registration
Justin worked on Distributed Networking Syscalls
Kevin Worked on the Extra Credit
Greg did a lot of systems testing
Everyone worked very hard on debugging

== Memory Model ==
We decided to use our project 3 code in project 4. USE_TLB is enabled in our network directory.
We also set NumPhysPages to 1048576, so page eviction will not occur.

==Network Threads==
You will find our implementation for the Registration Server and Network Threads primarily in system.cc and netcall.cc

The Registration Server is to be run on a seperate Nachos instance. It’s job is to wait for registration messages from Network Threads, and inform all of the network threads of where the other threads exist.

The Network Threads consist of 2 parts:
The RegisterNetworkThread() subroutine interacts with the Registration Server. This is a linear process.
The Network thread then enters a while(true) loop to perform any operations asked of it by its paired user thread. Total ordering is implemented here.

==Restaurant Simulation==
The restaurant simulation is divided across the following files:

networksim.c
simulation.c
cook.c
customer.c
manager.c
ordertaker.c
waiter.c

networksim is the file that Exec’s the other agents. This way pairs of User and Network threads get made at the same time.

simulation.c contains any shared data and subroutines that multiple agents call. When compiled, each agent puts together a unique executable file that includes simulation.c. This saves us duplicating code across multiple files, while still being able to initialize and process shared data.



=================
V. Testing:  (For each test case, you must show)
=================
         + How to test
         + Test Output

=== All the User Programs that work with Project 4 ===
teststartuserprogram
testp4syscalls
networksim

To run a Project 4 Registration Server in Nachos:
  nachos -s [number of expected net threads]  -m 0
Example: 
  nachos -s 4 -m 0

To run a Project 4 User Program:
 nachos -config [number read by user prog] -x ../test/[user program name] -m [ID greater than 0]
Example: 
  this will Exec four User/Network thread pairs for teststartuserprogram
  nachos -config 4 -x ../test/teststartuserprogram -m 1

==================
SAMPLE OUTPUT FOR 
teststartuserprogram
==================
a) Open 2 Windows of SCF - SSH aludra
b) Type the following:
    nachos -s 1 -m 0
    nachos -config 1 -x ../test/teststartuserprogram -m 1

aludra.usc.edu(73): nachos -s 1 -m 0
===Starting Registration Server===
SERVER: Wait for a REGNETTHREAD message
SERVER: Received REGNETTHREAD message
SERVER: buffer 26_1_0
SERVER: Parsed machineID: 1, mailID: 0
SERVER: Tell network thread to expect 1 messages
SERVER: sending REGNETTHREADRESPONSE: From (0, 0) to (1, 0) bytes 5, time 1291528885.372079
SERVER: 27_1
SERVER: Message all the threads with serverNetThreadInfo
SERVER: Sending to machineID: 1, mailID: 0
SERVER: 28_100
SERVER: Waiting for all GROUPINFO messages to be ACKed
=== RegServer() Complete ===

aludra.usc.edu(34): nachos -config 1 -x ../test/teststartuserprogram -m 1
===TestStartUserProgram===
Will Exec teststartuserprogramsub 1 times
===TestStartUserProgram Completed===
Exiting with status: 0
Starting NetworkThread
machineID: 1, mailID 0
NET THREAD[1,0]: Wait for StartSimulation message from UserProgram
===TestStartUserProgramSub===
USER THREAD[1,1]: StartUserProgram_Syscall
Request: 25_
NET THREAD[1,0]: Message server with machineID and mailBoxID
NET THREAD[1,0]: request: 26_1_0
NET THREAD[1,0]: Wait for an Ack message from Registration Server
NET THREAD[1,0]: Parse numMessages
NET THREAD[1,0]: buffer 27_1
NET THREAD[1,0]: Wait for 1 messages from server
NET THREAD[1,0]: Received message 1 of 1
NET THREAD[1,0]: buffer 28_100
NET THREAD[1,0]: parsed machineID: 1, mailID: 0
NET THREAD[1,0]: localNetThreadInfo->size(): 1
NET THREAD[1,0]: Reply to my user thread
Request receive RequestType: 25, msg: 25_
USER THREAD[1,1]: Finished StartUserProgram_Syscall
===TestStartUserProgramSub Completed===
Exiting with status: 0
NET THREAD[1,0]: Entering while(true) loop

If you enable packet loss, you will see additional resend messages

==================
SAMPLE OUTPUT FOR 
testp4syscalls
==================
This file runs through all the syscalls that can be run across a distributed system.
It’s too long for me to completely copy-paste. Here’s what the first part looks like.

aludra.usc.edu(35): nachos -config 1 -x ../test/testp4syscalls -m 1
===testp4syscalls===
Will Exec testp4syscallssub 1 times
Exiting with status: 0
Starting NetworkThread
machineID: 1, mailID 0
NET THREAD[1,0]: Wait for StartSimulation message from UserProgram
USER THREAD[1,1]: StartUserProgram_Syscall
Request: 25_
NET THREAD[1,0]: Message server with machineID and mailBoxID
NET THREAD[1,0]: request: 26_1_0
NET THREAD[1,0]: Wait for an Ack message from Registration Server
NET THREAD[1,0]: Parse numMessages
NET THREAD[1,0]: buffer 27_1
NET THREAD[1,0]: Wait for 1 messages from server
NET THREAD[1,0]: Received message 1 of 1
NET THREAD[1,0]: buffer 28_100
NET THREAD[1,0]: parsed machineID: 1, mailID: 0
NET THREAD[1,0]: localNetThreadInfo->size(): 1
NET THREAD[1,0]: Reply to my user thread
Request receive RequestType: 25, msg: 25_
USER THREAD[1,1]: Finished StartUserProgram_Syscall
------------------------------------------
Testing Lock
------------------------------------------
Creating Lock LK1...
USER THREAD[1,1]: CreateLock_Syscall
Request: 0_LK1
NET THREAD[1,0]: Entering while(true) loop
NET THREAD[1,0]: Add message to receivedMessages: 0_LK1
NET THREAD[1,0]: === Message from paired USER THREAD ===
NET THREAD[1,0]: Process message: 0_LK1
Processing Message from (1, 1) to (1, 0), time 1291529413.225235, msg: 0_LK1
CREATELOCK
Sending CREATELOCK response: 10000
Request receive RequestType: 10000, msg: 10000
USER THREAD[1,1]: Exiting CreateLock_Syscall
Succeeded
Creating Lock LK2...
USER THREAD[1,1]: CreateLock_Syscall
Request: 0_LK2
NET THREAD[1,0]: Add message to receivedMessages: 30_
NET THREAD[1,0]: Add message to receivedMessages: 0_LK2
NET THREAD[1,0]: === Message from paired USER THREAD ===
NET THREAD[1,0]: Process message: 0_LK2
Processing Message from (1, 1) to (1, 0), time 1291529413.228260, msg: 0_LK2
CREATELOCK
Sending CREATELOCK response: 10001
NET THREAD[1,0]: Add message to receivedMessages: 30_
Request receive RequestType: 10001, msg: 10001
USER THREAD[1,1]: Exiting CreateLock_Syscall
Succeeded
Acquiring Lock...
USER THREAD[1,1]: Acquire_Syscall
Request: 1_10000
NET THREAD[1,0]: Add message to receivedMessages: 1_10000
NET THREAD[1,0]: === Message from paired USER THREAD ===
NET THREAD[1,0]: Process message: 1_10000
Processing Message from (1, 1) to (1, 0), time 1291529413.516512, msg: 1_10000
ACQUIRE
Sending Acquire response: 10000
NET THREAD[1,0]: Add message to receivedMessages: 30_
Request receive RequestType: 10000, msg: 10000
USER THREAD[1,1]: Exiting Acquire_Syscall
Succeeded

If you enable packet loss, you will see additional resend messages




=================
VI. Discussion:
=================
         + Experiment expectation.  (What you hope will happen.)
         + Experiment result.  (What actually happens.)
         + Explanation

We ran into all sorts of interesting problems with this assignment.

We expected to be able to parse data relatively quickly. However, we quickly went over the limit of packet length encodinging timestamps as strings, so we had to encode it as binary data. This unfortunately, lead to all sorts of interesting problems, such as issues of Big-Endian vs Little Endian, and significant difficulty printing packet contents. This is because a binary 0 is treated as a null \0 when passed into printf(), so printf() would stop prematurely. Good fun.

Another extremely difficult task was testing Total Ordering, and hooking it up with the existing Networking functionality. It took days of coordination to get completely right. The biggest hurdle was determining the appropriate time to send out updated timestamps to the other network threads. 

Putting GetMV and SetMV everywhere in our restaurant simulation made us sad. :(

We encountered an interesting server registation issue. When we enabled packet loss, some net threads would fail to register with the server, while other net threads would register twice! This led to come crazy behavior further down the line. Backtracking to the source took a couple hours.